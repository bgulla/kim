// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apis/services/images/v1alpha1/images.proto

package images

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	v1alpha2 "k8s.io/cri-api/pkg/apis/runtime/v1alpha2"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageListRequest struct {
	// Filter to list images.
	Filter               *v1alpha2.ImageFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ImageListRequest) Reset()      { *m = ImageListRequest{} }
func (*ImageListRequest) ProtoMessage() {}
func (*ImageListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{0}
}
func (m *ImageListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageListRequest.Merge(m, src)
}
func (m *ImageListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageListRequest proto.InternalMessageInfo

func (m *ImageListRequest) GetFilter() *v1alpha2.ImageFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ImageListResponse struct {
	// List of images.
	Images               []*v1alpha2.Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ImageListResponse) Reset()      { *m = ImageListResponse{} }
func (*ImageListResponse) ProtoMessage() {}
func (*ImageListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{1}
}
func (m *ImageListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageListResponse.Merge(m, src)
}
func (m *ImageListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageListResponse proto.InternalMessageInfo

func (m *ImageListResponse) GetImages() []*v1alpha2.Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type ImagePullRequest struct {
	Image                *v1alpha2.ImageSpec  `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Auth                 *v1alpha2.AuthConfig `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ImagePullRequest) Reset()      { *m = ImagePullRequest{} }
func (*ImagePullRequest) ProtoMessage() {}
func (*ImagePullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{2}
}
func (m *ImagePullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImagePullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImagePullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImagePullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagePullRequest.Merge(m, src)
}
func (m *ImagePullRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImagePullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagePullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImagePullRequest proto.InternalMessageInfo

func (m *ImagePullRequest) GetImage() *v1alpha2.ImageSpec {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImagePullRequest) GetAuth() *v1alpha2.AuthConfig {
	if m != nil {
		return m.Auth
	}
	return nil
}

type ImagePullResponse struct {
	Image                string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImagePullResponse) Reset()      { *m = ImagePullResponse{} }
func (*ImagePullResponse) ProtoMessage() {}
func (*ImagePullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{3}
}
func (m *ImagePullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImagePullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImagePullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImagePullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagePullResponse.Merge(m, src)
}
func (m *ImagePullResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImagePullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagePullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImagePullResponse proto.InternalMessageInfo

func (m *ImagePullResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type ImagePushRequest struct {
	Image                *v1alpha2.ImageSpec  `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Auth                 *v1alpha2.AuthConfig `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ImagePushRequest) Reset()      { *m = ImagePushRequest{} }
func (*ImagePushRequest) ProtoMessage() {}
func (*ImagePushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{4}
}
func (m *ImagePushRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImagePushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImagePushRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImagePushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagePushRequest.Merge(m, src)
}
func (m *ImagePushRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImagePushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagePushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImagePushRequest proto.InternalMessageInfo

func (m *ImagePushRequest) GetImage() *v1alpha2.ImageSpec {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImagePushRequest) GetAuth() *v1alpha2.AuthConfig {
	if m != nil {
		return m.Auth
	}
	return nil
}

type ImagePushResponse struct {
	Image                string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImagePushResponse) Reset()      { *m = ImagePushResponse{} }
func (*ImagePushResponse) ProtoMessage() {}
func (*ImagePushResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{5}
}
func (m *ImagePushResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImagePushResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImagePushResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImagePushResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagePushResponse.Merge(m, src)
}
func (m *ImagePushResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImagePushResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagePushResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImagePushResponse proto.InternalMessageInfo

func (m *ImagePushResponse) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type ImageProgressRequest struct {
	Image                string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageProgressRequest) Reset()      { *m = ImageProgressRequest{} }
func (*ImageProgressRequest) ProtoMessage() {}
func (*ImageProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{6}
}
func (m *ImageProgressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageProgressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageProgressRequest.Merge(m, src)
}
func (m *ImageProgressRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageProgressRequest proto.InternalMessageInfo

func (m *ImageProgressRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type ImageProgressResponse struct {
	Status               []ImageStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ImageProgressResponse) Reset()      { *m = ImageProgressResponse{} }
func (*ImageProgressResponse) ProtoMessage() {}
func (*ImageProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{7}
}
func (m *ImageProgressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageProgressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageProgressResponse.Merge(m, src)
}
func (m *ImageProgressResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageProgressResponse proto.InternalMessageInfo

func (m *ImageProgressResponse) GetStatus() []ImageStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// lifted from github.com/containerd/containerd/api/services/content/v1/content.proto
type ImageStatus struct {
	Ref                  string    `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Status               string    `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Offset               int64     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Total                int64     `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	StartedAt            time.Time `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	UpdatedAt            time.Time `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ImageStatus) Reset()      { *m = ImageStatus{} }
func (*ImageStatus) ProtoMessage() {}
func (*ImageStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{8}
}
func (m *ImageStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageStatus.Merge(m, src)
}
func (m *ImageStatus) XXX_Size() int {
	return m.Size()
}
func (m *ImageStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ImageStatus proto.InternalMessageInfo

func (m *ImageStatus) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *ImageStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ImageStatus) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ImageStatus) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ImageStatus) GetStartedAt() time.Time {
	if m != nil {
		return m.StartedAt
	}
	return time.Time{}
}

func (m *ImageStatus) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

type ImageRemoveRequest struct {
	// Spec of the image to remove.
	Image                *v1alpha2.ImageSpec `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ImageRemoveRequest) Reset()      { *m = ImageRemoveRequest{} }
func (*ImageRemoveRequest) ProtoMessage() {}
func (*ImageRemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{9}
}
func (m *ImageRemoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageRemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageRemoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageRemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRemoveRequest.Merge(m, src)
}
func (m *ImageRemoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageRemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRemoveRequest proto.InternalMessageInfo

func (m *ImageRemoveRequest) GetImage() *v1alpha2.ImageSpec {
	if m != nil {
		return m.Image
	}
	return nil
}

type ImageRemoveResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageRemoveResponse) Reset()      { *m = ImageRemoveResponse{} }
func (*ImageRemoveResponse) ProtoMessage() {}
func (*ImageRemoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{10}
}
func (m *ImageRemoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageRemoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageRemoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageRemoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRemoveResponse.Merge(m, src)
}
func (m *ImageRemoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageRemoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRemoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRemoveResponse proto.InternalMessageInfo

type ImageStatusRequest struct {
	// Spec of the image.
	Image                *v1alpha2.ImageSpec `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ImageStatusRequest) Reset()      { *m = ImageStatusRequest{} }
func (*ImageStatusRequest) ProtoMessage() {}
func (*ImageStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{11}
}
func (m *ImageStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageStatusRequest.Merge(m, src)
}
func (m *ImageStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageStatusRequest proto.InternalMessageInfo

func (m *ImageStatusRequest) GetImage() *v1alpha2.ImageSpec {
	if m != nil {
		return m.Image
	}
	return nil
}

type ImageStatusResponse struct {
	// Status of the image.
	Image                *v1alpha2.Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ImageStatusResponse) Reset()      { *m = ImageStatusResponse{} }
func (*ImageStatusResponse) ProtoMessage() {}
func (*ImageStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{12}
}
func (m *ImageStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageStatusResponse.Merge(m, src)
}
func (m *ImageStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageStatusResponse proto.InternalMessageInfo

func (m *ImageStatusResponse) GetImage() *v1alpha2.Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type ImageTagRequest struct {
	// Spec of the image to remove.
	Image                *v1alpha2.ImageSpec `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Tags                 []string            `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ImageTagRequest) Reset()      { *m = ImageTagRequest{} }
func (*ImageTagRequest) ProtoMessage() {}
func (*ImageTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{13}
}
func (m *ImageTagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageTagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageTagRequest.Merge(m, src)
}
func (m *ImageTagRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageTagRequest proto.InternalMessageInfo

func (m *ImageTagRequest) GetImage() *v1alpha2.ImageSpec {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImageTagRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ImageTagResponse struct {
	// Status of the image.
	Image                *v1alpha2.Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ImageTagResponse) Reset()      { *m = ImageTagResponse{} }
func (*ImageTagResponse) ProtoMessage() {}
func (*ImageTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c65cb1807988f9, []int{14}
}
func (m *ImageTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageTagResponse.Merge(m, src)
}
func (m *ImageTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageTagResponse proto.InternalMessageInfo

func (m *ImageTagResponse) GetImage() *v1alpha2.Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*ImageListRequest)(nil), "kim.services.images.v1alpha1.ImageListRequest")
	proto.RegisterType((*ImageListResponse)(nil), "kim.services.images.v1alpha1.ImageListResponse")
	proto.RegisterType((*ImagePullRequest)(nil), "kim.services.images.v1alpha1.ImagePullRequest")
	proto.RegisterType((*ImagePullResponse)(nil), "kim.services.images.v1alpha1.ImagePullResponse")
	proto.RegisterType((*ImagePushRequest)(nil), "kim.services.images.v1alpha1.ImagePushRequest")
	proto.RegisterType((*ImagePushResponse)(nil), "kim.services.images.v1alpha1.ImagePushResponse")
	proto.RegisterType((*ImageProgressRequest)(nil), "kim.services.images.v1alpha1.ImageProgressRequest")
	proto.RegisterType((*ImageProgressResponse)(nil), "kim.services.images.v1alpha1.ImageProgressResponse")
	proto.RegisterType((*ImageStatus)(nil), "kim.services.images.v1alpha1.ImageStatus")
	proto.RegisterType((*ImageRemoveRequest)(nil), "kim.services.images.v1alpha1.ImageRemoveRequest")
	proto.RegisterType((*ImageRemoveResponse)(nil), "kim.services.images.v1alpha1.ImageRemoveResponse")
	proto.RegisterType((*ImageStatusRequest)(nil), "kim.services.images.v1alpha1.ImageStatusRequest")
	proto.RegisterType((*ImageStatusResponse)(nil), "kim.services.images.v1alpha1.ImageStatusResponse")
	proto.RegisterType((*ImageTagRequest)(nil), "kim.services.images.v1alpha1.ImageTagRequest")
	proto.RegisterType((*ImageTagResponse)(nil), "kim.services.images.v1alpha1.ImageTagResponse")
}

func init() {
	proto.RegisterFile("pkg/apis/services/images/v1alpha1/images.proto", fileDescriptor_51c65cb1807988f9)
}

var fileDescriptor_51c65cb1807988f9 = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x41, 0x4f, 0xd4, 0x4e,
	0x14, 0xdf, 0xb2, 0x4b, 0xf3, 0x67, 0xf8, 0x27, 0xe2, 0x08, 0xba, 0x59, 0xb1, 0x90, 0x9e, 0x96,
	0xc4, 0x9d, 0xb2, 0x25, 0x26, 0x26, 0x9e, 0x16, 0x88, 0x04, 0xe3, 0xc1, 0x54, 0x0e, 0xc6, 0x8b,
	0x0e, 0xcb, 0x6c, 0xdb, 0xb0, 0x65, 0x6a, 0x67, 0x8a, 0xf1, 0xe6, 0x47, 0xe0, 0xe8, 0x47, 0xe2,
	0xe8, 0xd1, 0x93, 0xca, 0xf2, 0x01, 0xfc, 0x04, 0x26, 0x66, 0x66, 0x5e, 0x97, 0xae, 0x0a, 0x16,
	0x38, 0x70, 0xeb, 0x9b, 0xf9, 0xfd, 0x7e, 0xef, 0xf7, 0x76, 0xde, 0x7b, 0x59, 0x44, 0xd2, 0xfd,
	0xd0, 0xa3, 0x69, 0x2c, 0x3c, 0xc1, 0xb2, 0xc3, 0xb8, 0xcf, 0x84, 0x17, 0x27, 0x34, 0x64, 0xc2,
	0x3b, 0xec, 0xd2, 0x61, 0x1a, 0xd1, 0x2e, 0xc4, 0x24, 0xcd, 0xb8, 0xe4, 0x78, 0x71, 0x3f, 0x4e,
	0x48, 0x01, 0x25, 0x70, 0x55, 0x40, 0x5b, 0x4b, 0x21, 0xe7, 0xe1, 0x90, 0x79, 0x1a, 0xbb, 0x9b,
	0x0f, 0x3c, 0x19, 0x27, 0x4c, 0x48, 0x9a, 0xa4, 0x86, 0xde, 0xea, 0x84, 0xb1, 0x8c, 0xf2, 0x5d,
	0xd2, 0xe7, 0x89, 0x17, 0xf2, 0x90, 0x9f, 0x21, 0x55, 0xa4, 0x03, 0xfd, 0x05, 0x70, 0x7f, 0xff,
	0xb1, 0x20, 0x31, 0xf7, 0xfa, 0x59, 0xdc, 0xa1, 0x69, 0xec, 0x8d, 0xcd, 0x66, 0xf9, 0x81, 0x92,
	0x2e, 0x4c, 0xfa, 0xea, 0xd4, 0x70, 0xdc, 0x6d, 0x34, 0xb7, 0xad, 0x6c, 0x3d, 0x8f, 0x85, 0x0c,
	0xd8, 0xbb, 0x9c, 0x09, 0x89, 0x1f, 0x21, 0x7b, 0x10, 0x0f, 0x25, 0xcb, 0x9a, 0xd6, 0xb2, 0xd5,
	0x9e, 0xf5, 0x1f, 0x10, 0x10, 0x28, 0xac, 0xfb, 0x44, 0x73, 0x9e, 0x6a, 0x50, 0x00, 0x60, 0x77,
	0x13, 0xdd, 0x2e, 0x49, 0x89, 0x94, 0x1f, 0x08, 0x86, 0x3d, 0x64, 0x9b, 0xb2, 0x9b, 0xd6, 0x72,
	0xbd, 0x3d, 0xeb, 0xdf, 0x3b, 0x47, 0x2b, 0x00, 0x98, 0xfb, 0x1e, 0x0c, 0xbd, 0xc8, 0x87, 0xc3,
	0xc2, 0x50, 0x17, 0x4d, 0xeb, 0x5b, 0xf0, 0x73, 0xff, 0x1c, 0x8d, 0x97, 0x29, 0xeb, 0x07, 0x06,
	0x89, 0x57, 0x51, 0x83, 0xe6, 0x32, 0x6a, 0x4e, 0x69, 0xc6, 0xe2, 0x9f, 0x8c, 0x5e, 0x2e, 0xa3,
	0x0d, 0x7e, 0x30, 0x88, 0xc3, 0x40, 0x23, 0xdd, 0x15, 0xb0, 0x6f, 0x12, 0x83, 0xfd, 0xf9, 0x72,
	0xe6, 0x19, 0x10, 0x2f, 0x79, 0x14, 0xd1, 0x0d, 0x79, 0x54, 0x89, 0x2f, 0xf4, 0xf8, 0x10, 0xcd,
	0x1b, 0x68, 0xc6, 0xc3, 0x8c, 0x09, 0x51, 0xf8, 0xfc, 0x3b, 0xfa, 0x2d, 0x5a, 0xf8, 0x0d, 0x0d,
	0xe2, 0x5b, 0xc8, 0x16, 0x92, 0xca, 0xbc, 0x78, 0xbf, 0x15, 0x72, 0x51, 0x4b, 0x43, 0x8d, 0x9a,
	0xb0, 0xde, 0x38, 0xfe, 0xba, 0x54, 0x0b, 0x80, 0xee, 0xfe, 0xb0, 0xd0, 0x6c, 0xe9, 0x16, 0xcf,
	0xa1, 0x7a, 0xc6, 0x06, 0xe0, 0x42, 0x7d, 0xe2, 0xbb, 0xe3, 0x54, 0x53, 0xfa, 0x10, 0x22, 0x75,
	0xce, 0x07, 0x03, 0xc1, 0x64, 0xb3, 0xbe, 0x6c, 0xb5, 0xeb, 0x01, 0x44, 0xaa, 0x12, 0xc9, 0x25,
	0x1d, 0x36, 0x1b, 0xfa, 0xd8, 0x04, 0x78, 0x03, 0x21, 0x21, 0x69, 0x26, 0xd9, 0xde, 0x1b, 0x2a,
	0x9b, 0xd3, 0xfa, 0xa7, 0x6d, 0x11, 0x33, 0x69, 0xa4, 0x98, 0x1f, 0xb2, 0x53, 0x4c, 0xda, 0xfa,
	0x7f, 0xca, 0xe5, 0xd1, 0xb7, 0x25, 0x2b, 0x98, 0x01, 0x5e, 0x4f, 0x2a, 0x91, 0x3c, 0xdd, 0xa3,
	0x20, 0x62, 0x5f, 0x46, 0x04, 0x78, 0x3d, 0xe9, 0x6e, 0x21, 0x6c, 0x5a, 0x9b, 0x25, 0xfc, 0x90,
	0x5d, 0xbd, 0x4f, 0xdc, 0x05, 0x74, 0x67, 0x42, 0xc8, 0x3c, 0xcd, 0x58, 0xdf, 0xfc, 0xa0, 0xd7,
	0xd0, 0xdf, 0x04, 0xfd, 0x42, 0x08, 0x9e, 0xbe, 0x33, 0xa9, 0x74, 0xee, 0xe4, 0x82, 0xca, 0x2b,
	0x74, 0x4b, 0xc7, 0x3b, 0x34, 0xbc, 0xc6, 0x4c, 0x60, 0xd4, 0x90, 0x34, 0x54, 0x2d, 0x50, 0x6f,
	0xcf, 0x04, 0xfa, 0xdb, 0xed, 0xc1, 0xb8, 0x69, 0xe5, 0x2b, 0x99, 0xf3, 0x7f, 0xda, 0xc8, 0xd6,
	0x07, 0x02, 0x27, 0xc8, 0x86, 0x16, 0x5c, 0xad, 0xdc, 0xcb, 0x50, 0x50, 0xab, 0x7b, 0x09, 0x06,
	0x18, 0x0d, 0x51, 0x43, 0x2d, 0x44, 0x4c, 0x2a, 0x50, 0x4b, 0x4b, 0xb8, 0xe5, 0x55, 0xc6, 0x9f,
	0x25, 0x52, 0xab, 0xab, 0x52, 0xa2, 0xd2, 0x72, 0xad, 0x94, 0x68, 0x62, 0x27, 0x7e, 0x40, 0xff,
	0xab, 0xb8, 0x58, 0x15, 0xd8, 0xaf, 0x22, 0x30, 0xb9, 0x85, 0x5a, 0x6b, 0x97, 0xe2, 0x98, 0xc4,
	0xab, 0x96, 0xa9, 0x51, 0x44, 0x15, 0x6b, 0x1c, 0x2f, 0xe7, 0x8a, 0x35, 0x96, 0x76, 0xaa, 0xae,
	0x51, 0x44, 0x37, 0x51, 0x63, 0x82, 0x6c, 0x33, 0xe8, 0x95, 0xfa, 0x73, 0x62, 0xb9, 0x54, 0xea,
	0xcf, 0xc9, 0x2d, 0x82, 0xf7, 0x50, 0x7d, 0x87, 0x86, 0xb8, 0x53, 0x81, 0x79, 0x36, 0xd9, 0x2d,
	0x52, 0x15, 0x6e, 0xb2, 0xac, 0x3f, 0x3b, 0x3e, 0x71, 0xac, 0x2f, 0x27, 0x4e, 0xed, 0xe3, 0xc8,
	0xb1, 0x8e, 0x47, 0x8e, 0xf5, 0x79, 0xe4, 0x58, 0xdf, 0x47, 0x8e, 0x75, 0x74, 0xea, 0xd4, 0x3e,
	0x9d, 0x3a, 0xb5, 0xd7, 0xed, 0x7f, 0xfe, 0xb5, 0x7a, 0x62, 0xe2, 0x5d, 0x5b, 0x2f, 0xe0, 0xb5,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x5a, 0xa7, 0xa7, 0x8d, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImagesClient is the client API for Images service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImagesClient interface {
	// Status of an image
	Status(ctx context.Context, in *ImageStatusRequest, opts ...grpc.CallOption) (*ImageStatusResponse, error)
	// List images
	List(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error)
	// Pull an image
	Pull(ctx context.Context, in *ImagePullRequest, opts ...grpc.CallOption) (*ImagePullResponse, error)
	PullProgress(ctx context.Context, in *ImageProgressRequest, opts ...grpc.CallOption) (Images_PullProgressClient, error)
	// Push an image
	Push(ctx context.Context, in *ImagePushRequest, opts ...grpc.CallOption) (*ImagePushResponse, error)
	PushProgress(ctx context.Context, in *ImageProgressRequest, opts ...grpc.CallOption) (Images_PushProgressClient, error)
	// Remove an image
	Remove(ctx context.Context, in *ImageRemoveRequest, opts ...grpc.CallOption) (*ImageRemoveResponse, error)
	// Tag an image
	Tag(ctx context.Context, in *ImageTagRequest, opts ...grpc.CallOption) (*ImageTagResponse, error)
}

type imagesClient struct {
	cc *grpc.ClientConn
}

func NewImagesClient(cc *grpc.ClientConn) ImagesClient {
	return &imagesClient{cc}
}

func (c *imagesClient) Status(ctx context.Context, in *ImageStatusRequest, opts ...grpc.CallOption) (*ImageStatusResponse, error) {
	out := new(ImageStatusResponse)
	err := c.cc.Invoke(ctx, "/kim.services.images.v1alpha1.Images/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) List(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error) {
	out := new(ImageListResponse)
	err := c.cc.Invoke(ctx, "/kim.services.images.v1alpha1.Images/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) Pull(ctx context.Context, in *ImagePullRequest, opts ...grpc.CallOption) (*ImagePullResponse, error) {
	out := new(ImagePullResponse)
	err := c.cc.Invoke(ctx, "/kim.services.images.v1alpha1.Images/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) PullProgress(ctx context.Context, in *ImageProgressRequest, opts ...grpc.CallOption) (Images_PullProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Images_serviceDesc.Streams[0], "/kim.services.images.v1alpha1.Images/PullProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesPullProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Images_PullProgressClient interface {
	Recv() (*ImageProgressResponse, error)
	grpc.ClientStream
}

type imagesPullProgressClient struct {
	grpc.ClientStream
}

func (x *imagesPullProgressClient) Recv() (*ImageProgressResponse, error) {
	m := new(ImageProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesClient) Push(ctx context.Context, in *ImagePushRequest, opts ...grpc.CallOption) (*ImagePushResponse, error) {
	out := new(ImagePushResponse)
	err := c.cc.Invoke(ctx, "/kim.services.images.v1alpha1.Images/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) PushProgress(ctx context.Context, in *ImageProgressRequest, opts ...grpc.CallOption) (Images_PushProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Images_serviceDesc.Streams[1], "/kim.services.images.v1alpha1.Images/PushProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesPushProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Images_PushProgressClient interface {
	Recv() (*ImageProgressResponse, error)
	grpc.ClientStream
}

type imagesPushProgressClient struct {
	grpc.ClientStream
}

func (x *imagesPushProgressClient) Recv() (*ImageProgressResponse, error) {
	m := new(ImageProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesClient) Remove(ctx context.Context, in *ImageRemoveRequest, opts ...grpc.CallOption) (*ImageRemoveResponse, error) {
	out := new(ImageRemoveResponse)
	err := c.cc.Invoke(ctx, "/kim.services.images.v1alpha1.Images/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) Tag(ctx context.Context, in *ImageTagRequest, opts ...grpc.CallOption) (*ImageTagResponse, error) {
	out := new(ImageTagResponse)
	err := c.cc.Invoke(ctx, "/kim.services.images.v1alpha1.Images/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImagesServer is the server API for Images service.
type ImagesServer interface {
	// Status of an image
	Status(context.Context, *ImageStatusRequest) (*ImageStatusResponse, error)
	// List images
	List(context.Context, *ImageListRequest) (*ImageListResponse, error)
	// Pull an image
	Pull(context.Context, *ImagePullRequest) (*ImagePullResponse, error)
	PullProgress(*ImageProgressRequest, Images_PullProgressServer) error
	// Push an image
	Push(context.Context, *ImagePushRequest) (*ImagePushResponse, error)
	PushProgress(*ImageProgressRequest, Images_PushProgressServer) error
	// Remove an image
	Remove(context.Context, *ImageRemoveRequest) (*ImageRemoveResponse, error)
	// Tag an image
	Tag(context.Context, *ImageTagRequest) (*ImageTagResponse, error)
}

// UnimplementedImagesServer can be embedded to have forward compatible implementations.
type UnimplementedImagesServer struct {
}

func (*UnimplementedImagesServer) Status(ctx context.Context, req *ImageStatusRequest) (*ImageStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedImagesServer) List(ctx context.Context, req *ImageListRequest) (*ImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedImagesServer) Pull(ctx context.Context, req *ImagePullRequest) (*ImagePullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedImagesServer) PullProgress(req *ImageProgressRequest, srv Images_PullProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method PullProgress not implemented")
}
func (*UnimplementedImagesServer) Push(ctx context.Context, req *ImagePushRequest) (*ImagePushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedImagesServer) PushProgress(req *ImageProgressRequest, srv Images_PushProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method PushProgress not implemented")
}
func (*UnimplementedImagesServer) Remove(ctx context.Context, req *ImageRemoveRequest) (*ImageRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedImagesServer) Tag(ctx context.Context, req *ImageTagRequest) (*ImageTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}

func RegisterImagesServer(s *grpc.Server, srv ImagesServer) {
	s.RegisterService(&_Images_serviceDesc, srv)
}

func _Images_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kim.services.images.v1alpha1.Images/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).Status(ctx, req.(*ImageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kim.services.images.v1alpha1.Images/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).List(ctx, req.(*ImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagePullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kim.services.images.v1alpha1.Images/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).Pull(ctx, req.(*ImagePullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_PullProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImageProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).PullProgress(m, &imagesPullProgressServer{stream})
}

type Images_PullProgressServer interface {
	Send(*ImageProgressResponse) error
	grpc.ServerStream
}

type imagesPullProgressServer struct {
	grpc.ServerStream
}

func (x *imagesPullProgressServer) Send(m *ImageProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Images_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kim.services.images.v1alpha1.Images/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).Push(ctx, req.(*ImagePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_PushProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImageProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).PushProgress(m, &imagesPushProgressServer{stream})
}

type Images_PushProgressServer interface {
	Send(*ImageProgressResponse) error
	grpc.ServerStream
}

type imagesPushProgressServer struct {
	grpc.ServerStream
}

func (x *imagesPushProgressServer) Send(m *ImageProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Images_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kim.services.images.v1alpha1.Images/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).Remove(ctx, req.(*ImageRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kim.services.images.v1alpha1.Images/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).Tag(ctx, req.(*ImageTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Images_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kim.services.images.v1alpha1.Images",
	HandlerType: (*ImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Images_Status_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Images_List_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Images_Pull_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Images_Push_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Images_Remove_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _Images_Tag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullProgress",
			Handler:       _Images_PullProgress_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushProgress",
			Handler:       _Images_PushProgress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apis/services/images/v1alpha1/images.proto",
}

func (m *ImageListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImagePullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImagePullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImagePullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImagePullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImagePullResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImagePullResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintImages(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImagePushRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImagePushRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImagePushRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImagePushResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImagePushResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImagePushResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintImages(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageProgressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageProgressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageProgressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintImages(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageProgressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageProgressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageProgressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImageStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintImages(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x32
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintImages(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x2a
	if m.Total != 0 {
		i = encodeVarintImages(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintImages(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintImages(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ref) > 0 {
		i -= len(m.Ref)
		copy(dAtA[i:], m.Ref)
		i = encodeVarintImages(dAtA, i, uint64(len(m.Ref)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageRemoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRemoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageRemoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageRemoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRemoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageRemoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ImageStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageTagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageTagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintImages(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImages(dAtA []byte, offset int, v uint64) int {
	offset -= sovImages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImageListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImageListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovImages(uint64(l))
		}
	}
	return n
}

func (m *ImagePullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImagePullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImagePushRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImagePushResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImageProgressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImageProgressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovImages(uint64(l))
		}
	}
	return n
}

func (m *ImageStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovImages(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovImages(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovImages(uint64(m.Offset))
	}
	if m.Total != 0 {
		n += 1 + sovImages(uint64(m.Total))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovImages(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovImages(uint64(l))
	return n
}

func (m *ImageRemoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImageRemoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ImageStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImageStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func (m *ImageTagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovImages(uint64(l))
		}
	}
	return n
}

func (m *ImageTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovImages(uint64(l))
	}
	return n
}

func sovImages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImages(x uint64) (n int) {
	return sovImages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImageListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageListRequest{`,
		`Filter:` + strings.Replace(fmt.Sprintf("%v", this.Filter), "ImageFilter", "v1alpha2.ImageFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*Image{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "Image", "v1alpha2.Image", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&ImageListResponse{`,
		`Images:` + repeatedStringForImages + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImagePullRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImagePullRequest{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageSpec", "v1alpha2.ImageSpec", 1) + `,`,
		`Auth:` + strings.Replace(fmt.Sprintf("%v", this.Auth), "AuthConfig", "v1alpha2.AuthConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImagePullResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImagePullResponse{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImagePushRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImagePushRequest{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageSpec", "v1alpha2.ImageSpec", 1) + `,`,
		`Auth:` + strings.Replace(fmt.Sprintf("%v", this.Auth), "AuthConfig", "v1alpha2.AuthConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImagePushResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImagePushResponse{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageProgressRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageProgressRequest{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageProgressResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]ImageStatus{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(strings.Replace(f.String(), "ImageStatus", "ImageStatus", 1), `&`, ``, 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&ImageProgressResponse{`,
		`Status:` + repeatedStringForStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageStatus{`,
		`Ref:` + fmt.Sprintf("%v", this.Ref) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`StartedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageRemoveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageRemoveRequest{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageSpec", "v1alpha2.ImageSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageRemoveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageRemoveResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ImageStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageStatusRequest{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageSpec", "v1alpha2.ImageSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageStatusResponse{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "Image", "v1alpha2.Image", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageTagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageTagRequest{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageSpec", "v1alpha2.ImageSpec", 1) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageTagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageTagResponse{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "Image", "v1alpha2.Image", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringImages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImageListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &v1alpha2.ImageFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &v1alpha2.Image{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagePullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImagePullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImagePullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &v1alpha2.ImageSpec{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &v1alpha2.AuthConfig{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagePullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImagePullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImagePullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagePushRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImagePushRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImagePushRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &v1alpha2.ImageSpec{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &v1alpha2.AuthConfig{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagePushResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImagePushResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImagePushResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageProgressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageProgressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageProgressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageProgressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageProgressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageProgressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, ImageStatus{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRemoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &v1alpha2.ImageSpec{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRemoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRemoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRemoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &v1alpha2.ImageSpec{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &v1alpha2.Image{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &v1alpha2.ImageSpec{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &v1alpha2.Image{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImages = fmt.Errorf("proto: unexpected end of group")
)
